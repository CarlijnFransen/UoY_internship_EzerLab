source("~/WUR/Internship/Internship/tpm_tables/exploratory_data_figures.R")
pheatmap(condition_subdf, scale='row')
write.csv(rownames(samples_subdf_2),file="samples_subdf_2.txt", quote = F, row.names=F)
write.csv(rownames(samples_subdf_3),file="samples_subdf_3.txt", quote = F, row.names=F)
par(mfrow=c(1,1))
plot(log(filtered_tpm_table$TNZ_1_C/filtered_tpm_table$WS_2_C)
, log(filtered_tpm_table$TNZ_1_T/filtered_tpm_table$WS_2_T) , xlab="log fold change TNZ and WS-2 control "
, ylab = "log fold change TNZ and WS-2 light"
#, main= "Comparison of log TPM between WS-2 light and TNZ light conditions"
, pch=20, col=rgb(0.1,0.1,0.1,0.3))
abline(v=0,col='blue', lwd=2)
abline(h=0,col='blue', lwd=2)
plot(log(filtered_tpm_table$TNZ_1_C/filtered_tpm_table$TNZ_1_T)
, log(filtered_tpm_table$WS_2_C/filtered_tpm_table$WS_2_T)
, xlab="log fold change of TNZ control and light", ylab = "log fold change of WS-2 control and light"
#, main= "Comparison of log TPM between WS-2 control and light and TNZ control and light conditions"
, pch=20, col=rgb(0.1,0.1,0.1,0.3))
abline(v=0,col='blue', lwd=2)
abline(h=0,col='blue', lwd=2)
write.csv(rownames(condition_subdf_2),file="condition_subdf_2.txt", quote = F, row.names=F)
write.csv(rownames(condition_subdf_3),file="condition_subdf_3.txt", quote = F, row.names=F)
?write.ftable
TPM_table_only_control <- read.csv("~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tnz_ws2_ril_TPM_table_only_control_2.csv", row.names=1)
zscore <- function(mat, direction=1){
apply(mat,direction,  function(i){
(i-mean(i))/sd(i)
})
}
library(dplyr)
zscore_tpm_table <- zscore(TPM_table_only_control)
new_zscore_tpm_table <- zscore_tpm_table[ , colSums(is.na(zscore_tpm_table))==0]
write.csv(new_zscore_tpm_table, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_only_control.csv", row.names = T, sep = "\t")
zscore_transposed <- as.data.frame(t(new_zscore_tpm_table))
########################################################################
########################### Filter stuff ###############################
########################################################################
# filter for transcription factors
Ath_TF_list <- read.delim("~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net/data/Ath_TF_list.txt", row.names = 1)
TF_filtered_list <- unique(Ath_TF_list$Gene_ID)
TPM_table_only_control_filtered_tf <- TPM_table_only_control[rownames(TPM_table_only_control) %in% TF_filtered_list,]
zscore_tpm_table_filtered_tf <- zscore_transposed[rownames(zscore_transposed) %in% TF_filtered_list,]
write.csv(TPM_table_only_control_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_tf.csv", row.names = T)
TPM_table_only_control <- read.csv("~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tnz_ws2_ril_TPM_table_only_control_2.csv", row.names=1)
zscore <- function(mat, direction=1){
apply(mat,direction,  function(i){
(i-mean(i))/sd(i)
})
}
library(dplyr)
zscore_tpm_table <- zscore(TPM_table_only_control)
new_zscore_tpm_table <- zscore_tpm_table[ , colSums(is.na(zscore_tpm_table))==0]
write.csv(new_zscore_tpm_table, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_only_control.csv", row.names = T, sep = "\t")
View(Ath_TF_list)
View(new_filtered_tpm_table)
View(TPM_table_only_control_filtered_tf)
#export this to a new file
TPM_table_only_control_filtered <- TPM_table_only_control[rownames(TPM_table_only_control) %in% unique_combined_selected_samples,]
write.csv(TPM_table_only_control_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_quadrants.csv", row.names = T)
# also filter z_scores_tpm table
#zscore_transposed <- as.data.frame(t(zscore_tpm_table))
zscore_tpm_table_filtered <- zscore_transposed[rownames(zscore_transposed) %in% unique_combined_selected_samples,]
write.csv(zscore_tpm_table_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_filterd_quadrants.csv", row.names = T)
# filter for transcription factors
Ath_TF_list <- read.delim("~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net/data/Ath_TF_list.txt", row.names = 1)
TF_filtered_list <- unique(Ath_TF_list$Gene_ID)
TPM_table_only_control_filtered_tf <- TPM_table_only_control[rownames(TPM_table_only_control) %in% TF_filtered_list,]
zscore_tpm_table_filtered_tf <- zscore_transposed[rownames(zscore_transposed) %in% TF_filtered_list,]
write.csv(TPM_table_only_control_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_tf.csv", row.names = T)
write.csv(zscore_tpm_table_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_filterd_tf.csv", row.names = T)
#export this to a new file
TPM_table_only_control_filtered <- TPM_table_only_control[rownames(TPM_table_only_control) %in% unique_combined_selected_samples,]
write.csv(TPM_table_only_control_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_quadrants.csv", row.names = T)
# also filter z_scores_tpm table
#zscore_transposed <- as.data.frame(t(zscore_tpm_table))
zscore_tpm_table_filtered <- zscore_transposed[rownames(zscore_transposed) %in% unique_combined_selected_samples,]
write.csv(zscore_tpm_table_filtered, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_filterd_quadrants.csv", row.names = T)
source("~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/scripts/create zscore tpm table.R")
TPM_table_only_control_filtered_tf <- TPM_table_only_control[rownames(TPM_table_only_control) %in% TF_filtered_list,]
zscore_tpm_table_filtered_tf <- zscore_transposed[rownames(zscore_transposed) %in% TF_filtered_list,]
write.csv(TPM_table_only_control_filtered_tf, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_tf.csv", row.names = T)
write.csv(zscore_tpm_table_filtered_tf, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_filterd_tf.csv", row.names = T)
TF_filtered_list <- unique(Ath_TF_list$Gene_ID)
TPM_table_only_control_filtered_tf <- TPM_table_only_control[rownames(TPM_table_only_control) %in% TF_filtered_list,]
zscore_tpm_table_filtered_tf <- zscore_transposed[rownames(zscore_transposed) %in% TF_filtered_list,]
write.csv(TPM_table_only_control_filtered_tf, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/tpm_table_filterd_tf.csv", row.names = T)
write.csv(zscore_tpm_table_filtered_tf, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net_test/data/zscore_tpm_table_filterd_tf.csv", row.names = T)
View(samples_subdf_2)
condition_rowname_2 <- rownames(condition_subdf[rownames(condition_subdf) %in% rownames(condition_df[["q2"]]),])
condition_rowname_3 <- rownames(condition_subdf[rownames(condition_subdf) %in% rownames(condition_df[["q3"]]),])
samples_rowname_2 <- rownames(samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q2"]]),])
samples_rowname_3 <- rownames(samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q3"]]),])
View(TPM_table_only_control_filtered_tf)
View(TPM_table_only_control_filtered)
color_df <- data.frame(TPM_table_rowname)
TPM_table_rowname <- rownames(TPM_table_only_control)
color_df <- data.frame(TPM_table_rowname)
View(color_df)
color_vector <- vector("integer", length=28775)
color_df <- data.frame(TPM_table_rowname, color_vector)
View(color_df)
color_vector <- vector("string", length=28775)
color_df <- data.frame(TPM_table_rowname, color_vector)
View(color_df)
View(color_df)
color_df$color_vector = "NONE"
color_df <- data.frame(TPM_table_rowname, color_vector, row.names = 1 )
View(color_df)
samples_vect <- c()
condition_vect <- c()
for (i in TPM_table_rowname){
if (i %in% condition_rowname_2){
condition_vect <- append(condition_vect, "q2")
}
else if (i %in% condition_rowname_3){
condition_vect <- append(condition_vect, "q3")
}
else{
condition_vect <- append(condition_vect, "NO")
}
if (i %in% samples_rowname_2){
samples_vect <- append(samples_vect, "q2")
}
else if (i %in% samples_rowname_3){
samples_vect <- append(samples_vect, "q3")
}
else{
samples_vect <- append(samples_vect, "NO")
}
}
color_df <- data.frame(TPM_table_rowname, condition_vect, samples_vect , row.names = 1 )
View(color_df)
for (i in TPM_table_rowname){
if (i %in% condition_rowname_2){
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 5)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 6)
}
else{
combi_vect <- append(combi_vect, 1)
}
}
else if (i %in% condition_rowname_3){
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 7)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 8)
}
else{
combi_vect <- append(combi_vect, 2)
}
}
else{
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 3)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 4)
}
else{
combi_vect <- append(combi_vect, 0)
}
}
}
combi_vect <- c()
for (i in TPM_table_rowname){
if (i %in% condition_rowname_2){
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 5)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 6)
}
else{
combi_vect <- append(combi_vect, 1)
}
}
else if (i %in% condition_rowname_3){
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 7)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 8)
}
else{
combi_vect <- append(combi_vect, 2)
}
}
else{
if (i %in% samples_rowname_2){
combi_vect <- append(combi_vect, 3)
}
else if (i %in% samples_rowname_3){
combi_vect <- append(combi_vect, 4)
}
else{
combi_vect <- append(combi_vect, 0)
}
}
}
color_df <- data.frame(TPM_table_rowname, combi_vect , row.names = 1 )
View(color_df)
write.csv(color_df, "~/WUR/Internship/Internship/to_git/UoY_internship_EzerLab/elastic_net/data/color_tpm.csv", row.names = T)
plot(log(filtered_tpm_table$TNZ_1_C/filtered_tpm_table$WS_2_C)
, log(filtered_tpm_table$TNZ_1_T/filtered_tpm_table$WS_2_T) , xlab="log fold change TNZ and WS-2 control "
, ylab = "log fold change TNZ and WS-2 light"
#, main= "Comparison of log TPM between WS-2 light and TNZ light conditions"
, pch=20, col=rgb(0.1,0.1,0.1,0.3))
abline(v=0,col='blue', lwd=2)
abline(h=0,col='blue', lwd=2)
plot(log(filtered_tpm_table$TNZ_1_C/filtered_tpm_table$TNZ_1_T)
, log(filtered_tpm_table$WS_2_C/filtered_tpm_table$WS_2_T)
, xlab="log fold change of TNZ control and light", ylab = "log fold change of WS-2 control and light"
#, main= "Comparison of log TPM between WS-2 control and light and TNZ control and light conditions"
, pch=20, col=rgb(0.1,0.1,0.1,0.3))
abline(v=0,col='blue', lwd=2)
abline(h=0,col='blue', lwd=2)
pheatmap(condition_subdf, scale='row')
#ril_filtered_tpm_table <- tnz_ws2_ril_TPM_table %>% filter_all(all_vars(.>=5)) %>% filter_all(any_vars(.>=20))
filtered_tpm_table$samples_log_TPM_light <- with(filtered_tpm_table, log(WS_2_T/TNZ_1_T))
filtered_tpm_table$samples_log_TPM_control <- with(filtered_tpm_table,log(WS_2_C/TNZ_1_C))
filtered_tpm_table$samples_log_TPM_light_stat <- apply(filtered_tpm_table[11],1 ,function(x) if(x > 0) "+" else "-")
filtered_tpm_table$samples_log_TPM_control_stat <- apply(filtered_tpm_table[12],1 ,function(x) if(x > 0) "+" else "-")
zipped_list <- mapply(list, filtered_tpm_table$samples_log_TPM_light, filtered_tpm_table$samples_log_TPM_control, SIMPLIFY=F)
filtered_tpm_table$samples_eucl_distance <- sapply(zipped_list, euclidean)
samples_quartile <- c()
for (i in rownames(filtered_tpm_table)){
if (filtered_tpm_table[i, "samples_log_TPM_light_stat"] == "-"){
if (filtered_tpm_table[i,"samples_log_TPM_control_stat"] == "-"){
samples_quartile <- append(samples_quartile, "q3")
}
if (filtered_tpm_table[i,"samples_log_TPM_control_stat"] == "+"){
samples_quartile <- append(samples_quartile ,"q4")
}
}
if (filtered_tpm_table [i,"samples_log_TPM_light_stat"] == "+"){
if (filtered_tpm_table[i,"samples_log_TPM_control_stat"] == "-"){
samples_quartile <- append(samples_quartile ,"q1")
}
if (filtered_tpm_table [i,"samples_log_TPM_control_stat"] == "+"){
samples_quartile <- append(samples_quartile ,"q2")
}
}
}
filtered_tpm_table$samples_quartile <- samples_quartile
new_filtered_tpm_table <- filtered_tpm_table[filtered_tpm_table$samples_eucl_distance>1,]
rownames_filtered_main_tpm <- rownames(new_filtered_tpm_table)
samples_df <- filtered_tpm_table[,11:16]
samples_df <- split(samples_df, samples_df$samples_quartile)
#write.csv(rownames_filtered_main_tpm,file="test_gprofiler.txt", quote = F, row.names=F)
samples_subdf <- ril_filtered_tpm_table[rownames(ril_filtered_tpm_table) %in% rownames_filtered_main_tpm,]
samples_subdf_1 <- samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q1"]]),]
samples_subdf_2 <- samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q2"]]),]
samples_subdf_3 <- samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q3"]]),]
samples_subdf_4 <- samples_subdf[rownames(samples_subdf) %in% rownames(samples_df[["q4"]]),]
selected_samples_for_elasticnet <- rownames(rbind(samples_subdf_1,samples_subdf_2,samples_subdf_3,samples_subdf_4))
selected_condition_for_elasticnet <- rownames(rbind(condition_subdf_1,condition_subdf_2,condition_subdf_3,condition_subdf_4))
combined_selected_samples <- c(selected_condition_for_elasticnet, selected_samples_for_elasticnet)
unique_combined_selected_samples <- unique(combined_selected_samples)
write.csv(unique_combined_selected_samples,file="genes_for_elasticnet.txt", quote = F, row.names=F)
write.csv(rownames(samples_subdf_2),file="samples_subdf_2.txt", quote = F, row.names=F)
write.csv(rownames(samples_subdf_3),file="samples_subdf_3.txt", quote = F, row.names=F)
#subdf <- ril_filtered_tpm_table[rownames(ril_filtered_tpm_table) %in% rownames_filtered_main_tpm,]
pheatmap(samples_subdf, scale='row')
#subdf <- ril_filtered_tpm_table[rownames(ril_filtered_tpm_table) %in% rownames_filtered_main_tpm,]
pheatmap(samples_subdf, scale='row')
plot(log(filtered_tpm_table$TNZ_1_C/filtered_tpm_table$WS_2_C)
, log(filtered_tpm_table$TNZ_1_T/filtered_tpm_table$WS_2_T) , xlab="log fold change TNZ and WS-2 control "
, ylab = "log fold change TNZ and WS-2 light"
#, main= "Comparison of log TPM between WS-2 light and TNZ light conditions"
, pch=20, col=rgb(0.1,0.1,0.1,0.3))
abline(v=0,col='blue', lwd=2)
abline(h=0,col='blue', lwd=2)
?pheatmap
View(condition_subdf)
# rownames(condition_df[["q2"]])
pritn(colnames(condition_subdf))
# rownames(condition_df[["q2"]])
print(colnames(condition_subdf))
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
print(strsplit(name,'_'))
}
print(strsplit(name,'_')[3])
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
print(strsplit(name,'_')[3])
}
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
print(strsplit(name,'_')[[3])
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
print(strsplit(name,'_')[[3]])
}
print(strsplit(name,'_')[[1]])
ct_condition <- c()
for (name in condition_names){
print(strsplit(name,'_')[[1]][[3]])
}
pheatmap(condition_subdf, scale='row', show_colnames = F, show_rownames = F, annotation_col = ct_condition)
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
ct_condition <- append( ct_condition, strsplit(name,'_')[[1]][[3]])
}
pheatmap(condition_subdf, scale='row', show_colnames = F, show_rownames = F,
annotation_col = ct_condition)
pheatmap(condition_subdf, scale='row', show_colnames = F, show_rownames = F,
annotation_col = factor(ct_condition))
?structure
pheatmap(condition_subdf, scale='row', show_colnames = F, show_rownames = F,
annotation_col = structure(ct_condition))
condition_names <- colnames(condition_subdf)
ct_condition <- c()
for (name in condition_names){
ct_condition <- append( ct_condition, strsplit(name,'_')[[1]][[3]])
}
ct_condition_df<- data.frame(condition_names, ct_conditions, row.names = 1)
ct_condition_df<- data.frame(condition_names, ct_condition, row.names = 1)
pheatmap(condition_subdf, scale='row', show_colnames = F, show_rownames = F,
annotation_col = structure(ct_condition_df))
sample_names <- colnames(sample_subdf)
sample_names <- colnames(samples_subdf)
ct_sample <- c()
for (name in sample_names){
ct_sample <- append( ct_condition, strsplit(name,'_')[[1]][[3]])
}
ct_sample_df<- data.frame(sample_names, ct_sample, row.names = 1)
sample_names <- colnames(samples_subdf)
ct_sample <- c()
for (name in sample_names){
ct_sample <- append( ct_sample, strsplit(name,'_')[[1]][[3]])
}
ct_sample_df<- data.frame(sample_names, ct_sample, row.names = 1)
pheatmap(samples_subdf, scale='row', show_colnames = F, show_rownames = F,
annotation_col = structure(ct_sample_df))
View(condition_subdf_2)
